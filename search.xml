<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>PhantomJS生成PDF</title>
      <link href="/posts/20190320--PhantomJS%E7%94%9F%E6%88%90PDF/"/>
      <url>/posts/20190320--PhantomJS%E7%94%9F%E6%88%90PDF/</url>
      
        <content type="html"><![CDATA[<p>当需要将页面原样输出为图片或PDF时,可以使用PhantomJS进行抓取<br>(官宣PhantomJS开发暂停,最新稳定版本phantomjs-2.1.1)</p><h3 id="下载文件"><a href="#下载文件" class="headerlink" title="下载文件"></a>下载文件</h3><p>官网 Download <a href="href=&quot;https://bitbucket.org/ariya/phantomjs/downloads/phantomjs-2.1.1-linux-x86_64.tar.bz2&quot;">phantomjs-2.1.1-linux-x86_64.tar.bz2</a>(22.3 MB) and extract the content.<br>上传至Linux服务器</p><h3 id="修改screenshot-js"><a href="#修改screenshot-js" class="headerlink" title="修改screenshot.js"></a>修改screenshot.js</h3><pre><code>&quot;use strict&quot;;var page = require(&apos;webpage&apos;).create();var system = require(&apos;system&apos;);var address = system.args[1];var output = system.args[2];page.viewportSize = {  width: 2400,  height: 20000};page.zoomFactor = 1;page.settings.loadImages = true;page.settings.resourceTimeout = 30000;page.settings.userAgent = &apos;Mozilla/5.0 AppleWebKit/537.36 (KHTML, like Gecko) Chrome/33.0.1750.117 Safari/537.36&apos;;page.open(address, function(status) {    function checkReadyState() {        setTimeout(function () {            var readyState = page.evaluate(function () {                return document.readyState;            });            if (&quot;complete&quot; === readyState) {                               page.paperSize = {                     format: &apos;A4&apos;,                    orientation: &apos;portrait&apos;,                     margin: &apos;0.8cm&apos;                 };                page.render(output);                console.log(&quot;生成成功&quot;);                console.log(&quot;$&quot;+output+&quot;$&quot;);                phantom.exit();             } else {                checkReadyState();            }        },1000);    }    checkReadyState();});</code></pre><h3 id="修改文件权限"><a href="#修改文件权限" class="headerlink" title="修改文件权限"></a>修改文件权限</h3><pre><code>执行Linux指令    /** chmod能改变权限，-R是目录下所有文件，777就是高权限（读、写、执行） */    chmod -R 777 /usr/local/phantomjs-2.1.1-forpdf</code></pre><h3 id="Java代码"><a href="#Java代码" class="headerlink" title="Java代码"></a>Java代码</h3><pre><code>public String phantomjsPdf(String orderNo,HttpServletRequest request){    /*phantomjs在服务器的路径*/    String phantomjs = &quot;/usr/local/phantomjs-2.1.1-forpdf/bin/phantomjs&quot;;    /*截图js在服务器的路径*/    String screenshot = &quot;/usr/local/phantomjs-2.1.1-forpdf/bin/screenshot.js&quot;;    /*要生成图片的链接*/    String url = request.getScheme() + &quot;://&quot; + request.getServerName() + &quot;:&quot; + request.getServerPort()+&quot;/product/getPdfPage.do?orderNo=&quot;+orderNo;    /*生成的图片路径*/    String time = new Date().getTime()+&quot;&quot;;    String imgPath = request.getSession().getServletContext().getRealPath(&quot;/&quot;)+&quot;/images/upload/image/&quot;+&quot;product_agreement/&quot;+time+&quot;.pdf&quot;;    /*linux命令*/    String shell = phantomjs+&quot; &quot;+screenshot+&quot; &quot;+url+&quot; &quot;+imgPath;    MyUtil.shell(shell);    return &quot;/images/upload/image/product_agreement/&quot;+time+&quot;.pdf&quot;;}注:1. url中参数传多个时,shell中的url必须使用&apos;&apos;包裹,否则会造成参数丢失   2. url参数中包含中文时,需将参数进行转码,否则会发生乱码/*MyUtil.shell() 执行shell命令*/public static void shell(String cmd) {    String[] cmds = { &quot;/bin/sh&quot;, &quot;-c&quot;, cmd };    Process process;    try {        process = Runtime.getRuntime().exec(cmds);        StreamGobbler errorGobbler = new StreamGobbler(process.getErrorStream(), &quot;Error&quot;);        StreamGobbler outputGobbler = new StreamGobbler(process.getInputStream(), &quot;Output&quot;);        errorGobbler.start();        outputGobbler.start();        try {            process.waitFor();        }        catch (InterruptedException e) {            e.printStackTrace();        }    } catch (IOException e) {        e.printStackTrace();    }}</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> PDF </tag>
            
            <tag> PhantomJS </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PDF添加图片印章-JAVA</title>
      <link href="/posts/20190317--PDF%E6%B7%BB%E5%8A%A0%E5%9B%BE%E7%89%87%E5%8D%B0%E7%AB%A0-JAVA/"/>
      <url>/posts/20190317--PDF%E6%B7%BB%E5%8A%A0%E5%9B%BE%E7%89%87%E5%8D%B0%E7%AB%A0-JAVA/</url>
      
        <content type="html"><![CDATA[<p>使用<a href="https://www.e-iceblue.cn/Downloads/Free-Spire-PDF-JAVA.html" target="_blank" rel="noopener">Free Spire.PDF for Java</a> 产品,为PDF添加印章<br>① 下载JAR包或使用Maven仓库<br>② Java代码示例</p><pre><code>//创建PdfDocument对象，加载PDF文档PdfDocument doc = new PdfDocument();doc.loadFromStream(new ByteArrayInputStream(buffer.toByteArray()));//获取文档最后一页PdfPageBase page = doc.getPages().get(doc.getPages().getCount()-1);//加载印章图片PdfImage image = PdfImage.fromStream(new URL(Const.oSSFilePath+productAgreement.getContractSeal()).openStream());//获取印章图片的宽度和高度int width = image.getWidth();int height = image.getHeight();//创建PdfTemplate对象PdfTemplate template = new PdfTemplate(width, height);//将图片绘制到模板template.getGraphics().drawImage(image, 0, 0, width, height);//创建PdfRubebrStampAnnotation对象，指定大小和位置Rectangle2D rect = new Rectangle2D.Float((float) (page.getActualSize().getWidth() - productAgreement.getAbscissa()), (float) (page.getActualSize().getHeight() - productAgreement.getOrdinate()),productAgreement.getSealWidth(),productAgreement.getSealHeight() );PdfRubberStampAnnotation stamp = new PdfRubberStampAnnotation(rect);//创建PdfAppearance对象PdfAppearance pdfAppearance = new PdfAppearance(stamp);//将模板应用为PdfAppearance的一般状态pdfAppearance.setNormal(template);//将PdfAppearance 应用为图章的样式stamp.setAppearance(pdfAppearance);//添加图章到PDFpage.getAnnotationsWidget().add(stamp);String filePath = &quot;pdf/预览协议.pdf&quot;;//保存文档doc.saveToFile(filePath,FileFormat.PDF);//上传阿里云AliOSSClientController aliOssClientCont = new AliOSSClientController();OSSClient ossClient = aliOssClientCont.getOSSClient();ossClient.putObject(Const.bucketName, filePath, new FileInputStream(filePath));ossClient.shutdown();注:自定义数据    印章图片地址:productAgreement.getContractSeal()    印章宽度:productAgreement.getSealWidth()    印章长度:productAgreement.getSealWidth()    印章位置横坐标:productAgreement.getSealWidth()    印章位置纵坐标:productAgreement.getSealWidth()</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Free Spire.PDF for Java </tag>
            
            <tag> PDF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL 6以后的驱动更新及时区问题</title>
      <link href="/posts/20190312--MySQL-6%E4%BB%A5%E5%90%8E%E7%9A%84%E9%A9%B1%E5%8A%A8%E6%9B%B4%E6%96%B0%E5%8F%8A%E6%97%B6%E5%8C%BA%E9%97%AE%E9%A2%98/"/>
      <url>/posts/20190312--MySQL-6%E4%BB%A5%E5%90%8E%E7%9A%84%E9%A9%B1%E5%8A%A8%E6%9B%B4%E6%96%B0%E5%8F%8A%E6%97%B6%E5%8C%BA%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h3 id="驱动更新"><a href="#驱动更新" class="headerlink" title="驱动更新"></a>驱动更新</h3><p>mysql 5及之前的版本使用的是旧版驱动”com.mysql.jdbc.Driver”<br>mysql 6及之后的版本需要更新到新版驱动”com.mysql.cj.jdbc.Driver”,否则版本不匹配便会报错</p><h3 id="时区设定"><a href="#时区设定" class="headerlink" title="时区设定"></a>时区设定</h3><p>使用新版驱动”com.mysql.cj.jdbc.Driver”,需要指定时区serverTimezone<br>(GMT%2B8、HongkongAsia/Shanghai或者Asia/Hongkong)</p><pre><code>url: jdbc:mysql://localhost:3306/base?useUnicode=true&amp;characterEncoding=UTF-8&amp;allowMultiQueries=true&amp;serverTimezone=GMT%2B8</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Druid强大的监控和扩展功能</title>
      <link href="/posts/20190311--Druid%E5%BC%BA%E5%A4%A7%E7%9A%84%E7%9B%91%E6%8E%A7%E5%92%8C%E6%89%A9%E5%B1%95%E5%8A%9F%E8%83%BD/"/>
      <url>/posts/20190311--Druid%E5%BC%BA%E5%A4%A7%E7%9A%84%E7%9B%91%E6%8E%A7%E5%92%8C%E6%89%A9%E5%B1%95%E5%8A%9F%E8%83%BD/</url>
      
        <content type="html"><![CDATA[<p>Druid不仅是数据库连接池,还提供强大的监控和扩展功能.</p><h3 id="Druid监控配置"><a href="#Druid监控配置" class="headerlink" title="Druid监控配置"></a>Druid监控配置</h3><ol><li>SSM项目<br> ①添加Maven依赖<pre><code>&lt;dependency&gt;    &lt;groupId&gt;com.alibaba&lt;/groupId&gt;    &lt;artifactId&gt;druid&lt;/artifactId&gt;    &lt;version&gt;1.0.1&lt;/version&gt;&lt;/dependency&gt;</code></pre> ②web.xml中进行配置<pre><code>&lt;filter&gt;    &lt;filter-name&gt;DruidWebStatFilter&lt;/filter-name&gt;    &lt;filter-class&gt;com.alibaba.druid.support.http.WebStatFilter&lt;/filter-class&gt;    &lt;init-param&gt;      &lt;param-name&gt;exclusions&lt;/param-name&gt;      &lt;param-value&gt;*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*&lt;/param-value&gt;    &lt;/init-param&gt;&lt;/filter&gt;&lt;!--druid监控页面 --&gt;&lt;servlet&gt;    &lt;servlet-name&gt;DruidStatView&lt;/servlet-name&gt;    &lt;servlet-class&gt;com.alibaba.druid.support.http.StatViewServlet&lt;/servlet-class&gt;    &lt;init-param&gt;        &lt;!-- 不允许清空统计数据 --&gt;        &lt;param-name&gt;resetEnable&lt;/param-name&gt;        &lt;param-value&gt;false&lt;/param-value&gt;    &lt;/init-param&gt;    &lt;init-param&gt;        &lt;!-- 用户名 --&gt;        &lt;param-name&gt;loginUsername&lt;/param-name&gt;        &lt;param-value&gt;yourname&lt;/param-value&gt;    &lt;/init-param&gt;    &lt;init-param&gt;        &lt;!-- 密码 --&gt;        &lt;param-name&gt;loginPassword&lt;/param-name&gt;        &lt;param-value&gt;yourpassword&lt;/param-value&gt;    &lt;/init-param&gt;&lt;/servlet&gt;&lt;servlet-mapping&gt;    &lt;servlet-name&gt;DruidStatView&lt;/servlet-name&gt;    &lt;url-pattern&gt;/druid/*&lt;/url-pattern&gt;&lt;/servlet-mapping&gt;&lt;!--druid监控页面 --&gt;</code></pre></li></ol><p>重新构建工程并重启项目，访问/druid即可进入到druid监控面板的登录页面,输入在web.xml中配置的账号和密码即可进入监控后台</p><ol start="2"><li><p>Spring Boot项目<br>①添加Maven依赖<br>&emsp;&emsp;同1.<br>②修改application.yml文件    </p><pre><code>spring:    datasource:          driver-class-name: com.mysql.cj.jdbc.Driver          url: ----------------          username: ---          password: ---              #druid配置          type: com.alibaba.druid.pool.DruidDataSource              #数据源其他配置              #初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时          initialSize: 5              #最小连接池数量          minIdle: 5              #最大连接池数量          maxActive: 20              #获取连接时最大等待时间，单位毫秒。配置了maxWait之后，缺省启用公平锁，并发效率会有所下降，如果需要可以通过配置useUnfairLock属性为true使用非公平锁          maxWait: 60000              #1) Destroy线程会检测连接的间隔时间2) testWhileIdle的判断依据，详细看testWhileIdle属性的说明          timeBetweenEvictionRunsMillis: 60000          minEvictableIdleTimeMillis: 300000              #用来检测连接是否有效的sql，要求是一个查询语句。如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会其作用。          validationQuery: SELECT 1 FROM DUAL              #申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。          testOnBorrow: false              #归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能          testOnReturn: false              #是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql下建议关闭。          poolPreparedStatements: false          maxPoolPreparedStatementPerConnectionSize: 20              #属性类型是字符串，通过别名的方式配置扩展插件，常用的插件有：监控统计用的filter:stat日志用的filter:log4j防御sql注入的filter:wall          filters: stat,wall              #合并多个DruidDataSource的监控数据          useGlobalDataSourceStat: true              #通过connectProperties属性来打开mergeSql功能；慢SQL记录          connectionProperties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500</code></pre><p>③配置Druid    </p><pre><code>@Configurationpublic class DruidConfig {    @ConfigurationProperties(prefix=&quot;spring.datasource&quot;)    @Bean    public DataSource druid(){        return new DruidDataSource();    }    /**     * 注册一个StatViewServlet     * @return     */    @Bean    public ServletRegistrationBean statViewServlet(){        ServletRegistrationBean bean=new ServletRegistrationBean(new StatViewServlet(),&quot;/druid/*&quot;);        Map&lt;String, String&gt; initParams=new HashMap&lt;&gt;();        initParams.put(&quot;loginUsername&quot;,&quot;admin&quot;);        initParams.put(&quot;loginPassword&quot;,&quot;123456&quot;);        bean.setInitParameters(initParams);        return bean;    }    /**     * 注册一个filterRegistrationBean     * @return     */    @Bean    public FilterRegistrationBean webStatFilter() {        FilterRegistrationBean bean = new FilterRegistrationBean();        bean.setFilter(new WebStatFilter());        Map&lt;String, String&gt; initParams=new HashMap&lt;&gt;();        initParams.put(&quot;exclusions&quot;, &quot;*.js,*.css,/druid/*&quot;);        bean.setInitParameters(initParams);        bean.setUrlPatterns(Arrays.asList(&quot;/*&quot;));        return bean;    }}</code></pre><p>重启项目,访问/druid,输入配置中的账号密码进入监控后台.<br><img src="/medias/images/1552359328(1).jpg" width="300" height="120" alt="后台监控"></p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Druid </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript中的for..in循环</title>
      <link href="/posts/20190305--JavaScript%E4%B8%AD%E7%9A%84for-in%E5%BE%AA%E7%8E%AF/"/>
      <url>/posts/20190305--JavaScript%E4%B8%AD%E7%9A%84for-in%E5%BE%AA%E7%8E%AF/</url>
      
        <content type="html"><![CDATA[<p>在JS中使用循环,常用两种方式</p><ol><li>for(var i=0;i&lt;obj.length;i++){…}</li><li>for (var i in obj) {…}</li></ol><h3 id="问题复现"><a href="#问题复现" class="headerlink" title="问题复现"></a>问题复现</h3><p>在一次使用for..in循环对象时,发现循环次数大于对象的size,从而影响了最终的结果.</p><pre><code>&lt;script type=&quot;text/javascript&quot;&gt;    $(function () {        var conferenceSeatUserList = &apos;${conferenceSeatUserList}&apos;;        var seatUser = eval(&apos;(&apos; + conferenceSeatUserList + &apos;)&apos;);        for(var i in seatUser){            var ordinate = seatUser[i].ordinate;            var abscissa = seatUser[i].abscissa;            var attendeeName = seatUser[i].attendeeName;            var obj = $(&quot;#tableId&quot;)[0].rows[ordinate - 1].cells[abscissa - 1];            if(seatUser[i].coferenceId!=null){                obj.innerHTML  = seatUser[i].attendeeName+ &apos;&lt;br/&gt;&lt;div class=&quot;layui-inline&quot;&gt;&lt;button id=&quot;updateBtn&quot; class=&quot;layui-btn layui-btn-primary layui-btn-pr-master&quot; type=&quot;button&quot; onclick=&quot;selectAttendeeMan(&apos;+seatUser[i].id+&apos;)&quot;&gt;更改&lt;/button&gt;&apos;;            }            if(seatUser[i].coferenceId==null &amp;&amp; seatUser[i].status==2){                obj.innerHTML  =  &apos;&lt;div class=&quot;layui-inline&quot;&gt;&apos;+ &apos;&lt;button id=&quot;updateBtn&quot; class=&quot;layui-btn layui-btn-primary layui-btn-pr-master&quot; type=&quot;button&quot; onclick=&quot;selectAttendeeMan(&apos;+seatUser[i].id+&apos;)&quot;&gt;选人&lt;/button&gt;&apos;;            }            //启用或禁用座位            if(seatUser[i].status==2){                obj.innerHTML  += &apos;&lt;button id=&quot;updateBtn&quot; class=&quot;layui-btn layui-btn-primary layui-btn-pr-master&quot; type=&quot;button&quot; onclick=&quot;updateSeatStatus(&apos;+seatUser[i].id+&apos;,3)&quot;&gt;禁用&lt;/button&gt;&apos;;            }            if(seatUser[i].status==3 &amp;&amp; seatUser[i].coferenceId==null){                obj.innerHTML  += &apos;&lt;button id=&quot;updateBtn&quot; class=&quot;layui-btn layui-btn-primary layui-btn-pr-master&quot; type=&quot;button&quot; onclick=&quot;updateSeatStatus(&apos;+seatUser[i].id+&apos;,2)&quot;&gt;启用&lt;/button&gt;&apos;;            }        }    });&lt;/script&gt;</code></pre><h3 id="分析原因"><a href="#分析原因" class="headerlink" title="分析原因"></a>分析原因</h3><p>查看相关内容发现,for..in循环in判断的是对象的所有属性，包括对象实例及其原型的属性(即会把某个类型的原型(prototype)中方法与属性给遍历出来)，所以这可能会导致代码中出现意外的错误.</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><ol><li>为了避免这个问题，我们可以使用对象的hasOwnProperty()方法来避免这个问题.<br>hasOwnProperty判断一个对象是否有名称的属性或对象，此方法无法检查该对象的原型链中是否具有该属性，该属性必须是对象本身的一个成员。<br>如果该属性或者方法是该 对象自身定义的而不是器原型链中定义的 则返回true;否则返回false; </li></ol><pre><code>//如果不是该对象自身直接创建的属性（也就是该属性是原型中的属性），则跳过显示for(var i in seatUser){    if(!seatUser.hasOwnProperty(i)){     continue;    }    ...} </code></pre><ol start="2"><li>直接使用for(var i=0;i&lt;obj.length;i++){…},放弃使用for..in循环.</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot项目中使用JSP</title>
      <link href="/posts/20190305--Spring%20Boot%E9%A1%B9%E7%9B%AE%E4%B8%AD%E4%BD%BF%E7%94%A8JSP/"/>
      <url>/posts/20190305--Spring%20Boot%E9%A1%B9%E7%9B%AE%E4%B8%AD%E4%BD%BF%E7%94%A8JSP/</url>
      
        <content type="html"><![CDATA[<p>Spring Boot 的默认视图支持是 Thymeleaf 模板引擎,但是想使用我们熟悉的JSP怎么办?</p><h2 id="一-如何配置JSP"><a href="#一-如何配置JSP" class="headerlink" title="一.如何配置JSP"></a>一.如何配置JSP</h2><h3 id="1-pom-xml中增加对-JSP-文件的支持"><a href="#1-pom-xml中增加对-JSP-文件的支持" class="headerlink" title="1. pom.xml中增加对 JSP 文件的支持"></a>1. pom.xml中增加对 JSP 文件的支持</h3><p>servlet依赖</p><pre><code>&lt;dependency&gt;        &lt;groupId&gt;javax.servlet&lt;/groupId&gt;        &lt;artifactId&gt;jstl&lt;/artifactId&gt;    &lt;/dependency&gt;</code></pre><p>tomcat支持</p><pre><code>&lt;dependency&gt;    &lt;groupId&gt;org.apache.tomcat.embed&lt;/groupId&gt;    &lt;artifactId&gt;tomcat-embed-jasper&lt;/artifactId&gt;    &lt;scope&gt;provided&lt;/scope&gt;&lt;/dependency&gt;</code></pre><h3 id="2-application-yml中配置jsp路径"><a href="#2-application-yml中配置jsp路径" class="headerlink" title="2. application.yml中配置jsp路径"></a>2. application.yml中配置jsp路径</h3><pre><code>spring:  mvc:    view:      prefix: /WEB-INF/jsp/        # 页面默认前缀目录      suffix: .jsp                 # 响应页面默认后缀</code></pre><h3 id="3-jsp页面热部署配置"><a href="#3-jsp页面热部署配置" class="headerlink" title="3. jsp页面热部署配置"></a>3. jsp页面热部署配置</h3><pre><code>server:  port: 8080        #端口号  servlet:    jsp:      init-parameters:        development: true</code></pre><h2 id="二-使用JSP做视图有哪些问题"><a href="#二-使用JSP做视图有哪些问题" class="headerlink" title="二.使用JSP做视图有哪些问题"></a>二.使用JSP做视图有哪些问题</h2><h3 id="1-项目部署问题"><a href="#1-项目部署问题" class="headerlink" title="1. 项目部署问题"></a>1. 项目部署问题</h3><p>使用外部Tomcat部署,没有问题<br>若使用Spring boot内置的Tomcat需要将项目打成war包<br>(如果打jar包,WEB-INF下的jsp页面打不进去,无法访问.<br>Linux下项目启动命令:nohup java -jar demo-0.0.1-SNAPSHOT.war &gt; system.log 2&gt;&amp;1 &amp;)</p><pre><code>&lt;packaging&gt;war&lt;/packaging&gt;</code></pre><h3 id="2-JAR包冲突问题"><a href="#2-JAR包冲突问题" class="headerlink" title="2. JAR包冲突问题"></a>2. JAR包冲突问题</h3><p>当使用了阿里云以下依赖,启动项目时报错 \jaxb-impl\2.3.0\jaxb-api.jar (系统找不到指定的文件)等类似问题,但不影响使用</p><pre><code>&lt;dependency&gt;    &lt;groupId&gt;com.aliyun&lt;/groupId&gt;    &lt;artifactId&gt;aliyun-java-sdk-core&lt;/artifactId&gt;    &lt;version&gt;4.0.6&lt;/version&gt;&lt;/dependency&gt;</code></pre><p>解决方式:<br>(第一种)<br>① pom.xml中添加依赖</p><pre><code>&lt;dependency&gt;    &lt;groupId&gt;com.sun.xml.bind&lt;/groupId&gt;    &lt;artifactId&gt;jaxb-impl&lt;/artifactId&gt;    &lt;version&gt;2.3.0&lt;/version&gt;&lt;/dependency&gt;</code></pre><p>② 手动添加jar包到maven仓库<br>&emsp;&emsp;jaxb-api.jar<br>&emsp;&emsp;jaxb-core.jar<br>&emsp;&emsp;jaxb-impl-2.3.0.jar</p><p>[推荐] (第二种)<br>解决冲突,修改pom.xml中aliyun的依赖</p><pre><code>&lt;dependency&gt;    &lt;groupId&gt;com.aliyun&lt;/groupId&gt;    &lt;artifactId&gt;aliyun-java-sdk-core&lt;/artifactId&gt;    &lt;version&gt;4.0.6&lt;/version&gt;    &lt;exclusions&gt;        &lt;exclusion&gt;            &lt;artifactId&gt;jaxb-api&lt;/artifactId&gt;            &lt;groupId&gt;javax.xml.bind&lt;/groupId&gt;        &lt;/exclusion&gt;        &lt;exclusion&gt;            &lt;artifactId&gt;jaxb-impl&lt;/artifactId&gt;            &lt;groupId&gt;com.sun.xml.bind&lt;/groupId&gt;        &lt;/exclusion&gt;    &lt;/exclusions&gt;&lt;/dependency&gt;</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
            <tag> JSP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于mybatis中collection嵌套查询问题总结</title>
      <link href="/posts/20190304--%E5%85%B3%E4%BA%8Emybatis%E4%B8%ADcollection%E5%B5%8C%E5%A5%97%E6%9F%A5%E8%AF%A2%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/"/>
      <url>/posts/20190304--%E5%85%B3%E4%BA%8Emybatis%E4%B8%ADcollection%E5%B5%8C%E5%A5%97%E6%9F%A5%E8%AF%A2%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>mybatis分页查询,使用了collection进行一对多关联时,出现分页不正确的问题<br><img src="/medias/images/201903050938.jpg" width="300" height="120" alt="订单分页"><br>分页的每页记录数pageSize=5,如图查询结果首页只有4条订单数据.</p><h3 id="分析原因"><a href="#分析原因" class="headerlink" title="分析原因"></a>分析原因</h3><p>在订单查询中,涉及订单和订单流水两张表,一个订单对应一个或多个流水<br>OrderMapper.xml中使用collection进行嵌套查询<br>错误写法:</p><pre><code>&lt;resultMap type=&quot;Order&quot; id=&quot;ContractDetailed&quot;&gt;    &lt;result property=&quot;orderNo&quot; column=&quot;orderNo&quot; /&gt;    &lt;result property=&quot;sumMoney&quot; column=&quot;sumMoney&quot; /&gt;    &lt;result property=&quot;couponAmount&quot; column=&quot;couponAmount&quot; /&gt;    &lt;result property=&quot;createTime&quot; column=&quot;createTime&quot; /&gt;    &lt;result property=&quot;payTime&quot; column=&quot;payTime&quot; /&gt;    &lt;result property=&quot;states&quot; column=&quot;states&quot; /&gt;    &lt;result property=&quot;payType&quot; column=&quot;payType&quot; /&gt;    &lt;result property=&quot;orderId&quot; column=&quot;orderId&quot; /&gt;    &lt;result property=&quot;orderType&quot; column=&quot;orderType&quot; /&gt;    &lt;collection property=&quot;trxorderDetailList&quot; ofType=&quot;TrxorderDetailDTO&quot;&gt;        &lt;result column=&quot;trxorderDetailId&quot; property=&quot;trxorderDetailId&quot; /&gt;        &lt;result column=&quot;courseId&quot; property=&quot;courseId&quot; /&gt;        &lt;result column=&quot;currentPrice&quot; property=&quot;currentPirce&quot; /&gt;        &lt;result column=&quot;courseName&quot; property=&quot;courseName&quot; /&gt;    &lt;/collection&gt;&lt;/resultMap&gt;&lt;select id=&quot;queryOrderForUc&quot; resultMap=&quot;ContractDetailed&quot; parameterType=&quot;java.util.HashMap&quot;&gt;    SELECT        &lt;include refid=&quot;orders_columns&quot; /&gt;    FROM         edu_orders    LEFT JOIN         edu_trxorder_detail ON edu_orders.ORDER_ID = edu_trxorder_detail.trxorder_id&lt;/select&gt;</code></pre><p>正确写法:</p><pre><code>&lt;resultMap id=&quot;ContractDetailed&quot; type=&quot;Order&quot;&gt;    &lt;result property=&quot;orderNo&quot; column=&quot;orderNo&quot; /&gt;    &lt;result property=&quot;sumMoney&quot; column=&quot;sumMoney&quot; /&gt;    &lt;result property=&quot;couponAmount&quot; column=&quot;couponAmount&quot; /&gt;    &lt;result property=&quot;createTime&quot; column=&quot;createTime&quot; /&gt;    &lt;result property=&quot;payTime&quot; column=&quot;payTime&quot; /&gt;    &lt;result property=&quot;states&quot; column=&quot;states&quot; /&gt;    &lt;result property=&quot;payType&quot; column=&quot;payType&quot; /&gt;    &lt;result property=&quot;orderId&quot; column=&quot;orderId&quot; /&gt;    &lt;result property=&quot;orderType&quot; column=&quot;orderType&quot; /&gt;    &lt;collection property=&quot;trxorderDetailList&quot; ofType=&quot;TrxorderDetailDTO&quot; column=&quot;trxorder_id&quot;  select=&quot;getDetailInfoByOrderId&quot;&gt;&lt;/collection&gt;&lt;/resultMap&gt;&lt;select id=&quot;queryOrderForUc&quot; resultMap=&quot;ContractDetailed&quot; parameterType=&quot;java.util.HashMap&quot;&gt;    SELECT        &lt;include refid=&quot;orders_columns&quot; /&gt;    FROM edu_orders&lt;/select&gt;&lt;resultMap id=&quot;detailInfoMap&quot; type=&quot;TrxorderDetailDTO&quot;&gt;    &lt;id column=&quot;trxorder_id&quot; property=&quot;id&quot;/&gt;    &lt;result column=&quot;courseId&quot; property=&quot;courseId&quot; /&gt;    &lt;result column=&quot;currentPrice&quot; property=&quot;currentPirce&quot; /&gt;    &lt;result column=&quot;courseName&quot; property=&quot;courseName&quot; /&gt;&lt;/resultMap&gt;&lt;select id=&quot;getDetailInfoByOrderId&quot; parameterType=&quot;java.lang.Long&quot; resultMap=&quot;detailInfoMap&quot;&gt;    SELECT        &lt;include refid=&quot;trxorder_detail_columns&quot; /&gt;    FROM        edu_trxorder_detail     WHERE          edu_trxorder_detail.trxorder_id=#{id}&lt;/select&gt;</code></pre><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>当使用MyBatis进行查询的时候如果一个 JavaBean 中包含另一个 JavaBean 或者 Collection 时，可以通过 MyBatis 的嵌套查询来获取需要的结果;<br>① Collection 同一个查询映射到属性的嵌套<br>&emsp;&emsp;如果在一个查询中可以直接查询到所需要的数据，但是需要映射到该对象的属性上，则可以使用该方式.<br>&emsp;&emsp;但在分页时,它会将collection中查询到的条数作为分页约束,从而出现分页不正确的问题<br>② Collection 一个查询调用另一个查询实现的嵌套<br>&emsp;&emsp;collection : 一个复杂的类型关联，许多结果将映射为这种类型<br>&emsp;&emsp;property : 这是关联的 JavaBean 中的属性名<br>&emsp;&emsp;javaType : property 属性对应的集合类型<br>&emsp;&emsp;ofType : property 集合中的泛型<br>&emsp;&emsp;column : RoleModel 的 id ，作为参数传入被调用的 Select 语句<br>&emsp;&emsp;select : 另外一个映射语句的 ID</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>个人博客-初体验</title>
      <link href="/posts/20190301--%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2-%E5%88%9D%E4%BD%93%E9%AA%8C/"/>
      <url>/posts/20190301--%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2-%E5%88%9D%E4%BD%93%E9%AA%8C/</url>
      
        <content type="html"><![CDATA[<h3 id="人需要沉淀-要有足够的时间去反思-才能让自己变得更完美"><a href="#人需要沉淀-要有足够的时间去反思-才能让自己变得更完美" class="headerlink" title="人需要沉淀,要有足够的时间去反思,才能让自己变得更完美"></a>人需要沉淀,要有足够的时间去反思,才能让自己变得更完美</h3><p>本博客基于 Hexo 的 <a href="https://github.com/blinkfox/hexo-theme-matery" target="_blank" rel="noopener">hexo-theme-matery</a>主题搭建</p>]]></content>
      
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
